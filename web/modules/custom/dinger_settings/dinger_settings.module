<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\EntityReferenceFieldItemList;
use Drupal\Core\Session\AccountInterface;
use Drupal\dinger_settings\Model\FileStorageResponse;
use Drupal\dinger_settings\Plugin\Field\UserProfilePictureComputedField;
use Drupal\dinger_settings\Plugin\Field\UserRolesComputedField;
use Drupal\dinger_settings\Service\BiddingService;
use Drupal\dinger_settings\Service\CallsService;
use Drupal\dinger_settings\Service\CustomersService;
use Drupal\dinger_settings\Service\DataAccessor;
use Drupal\dinger_settings\Service\FireStorageCloudService;
use Drupal\dinger_settings\Service\OrdersService;
use Drupal\dinger_settings\Service\UtilsService;
use Drupal\file\FileInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_alter().
 */
function dinger_settings_entity_type_alter(array &$entity_types): void
{
  $nodeType = $entity_types['node'];
  if ($nodeType instanceof EntityTypeInterface) {
    $nodeType->addConstraint('UniqueCallPerOrder');
    $nodeType->addConstraint('AmountPerCallType');
    $nodeType->addConstraint('BidAmountPerType');
    $nodeType->addConstraint('TransactionAmountConstraint');
    $nodeType->addConstraint('TransactionCancelledConstraint');
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function dinger_settings_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle): void
{
  if ($entity_type->id() == 'user' && $bundle == 'user') {
    $profilePictureFieldDefinition = BaseFieldDefinition::create('string')
      ->setLabel(t('User profile picture'))
      ->setName(t('User profile picture'))
      ->setDescription(t('Computed url to the profile picture of user'))
      ->setComputed(true)
      ->setClass(UserProfilePictureComputedField::class);
    $fields['field_profile_picture'] = $profilePictureFieldDefinition;

    $userRolesFieldDefinition = BaseFieldDefinition::create('string')
      ->setLabel(t('User roles'))
      ->setName(t('User roles'))
      ->setDescription(t('Computed roles of the of user'))
      ->setComputed(true)
      ->setClass(UserRolesComputedField::class);
    $fields['field_user_roles'] = $userRolesFieldDefinition;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dinger_settings_node_presave(NodeInterface $node): void
{
  if ($node->isNew()) {
    /** @var UtilsService $utilsService **/
    $utilsService = Drupal::service('hucha_settings.utils_service');
    $reference = '_' . $utilsService->generateRandomId();
    switch ($node->bundle()) {
      case 'customer':
        $node->setTitle('CUS' . $reference);
        break;
      case 'order':
        $node->setTitle('ORD' . $reference);
        break;
      case 'call':
        $node->setTitle('CAL' . $reference);
        break;
      case 'bid':
        $node->setTitle('BID' . $reference);
        break;
      case 'transaction':
        $node->setTitle('TX' . $reference);
        break;
      case 'order_item':
        $node->setTitle('ORD_IT' . $reference);
        break;
      case 'preferred_route':
        $node->setTitle('ROUTE' . $reference);
        break;
    }
  } else {
    if ($node->bundle() == 'call') {
      /** @var $callsService CallsService */
      $callsService = Drupal::service('hucha_settings.calls_service');
      $callsService->onCallPresave($node);
    }
  }

  if ($node->bundle() == 'order') {
    /**
     * Update order total price (Everytime the order is updated because order items may have changed)
     */
    $currentTotalPrice = doubleval($node->get('field_order_shopping_total_cost')->getString());
    /** @var EntityReferenceFieldItemList $orderItems **/
    $orderItems = $node->get('field_order_items');
    $totalPrice = 0;
    /**
     * @var Node  $orderItem
     */
    foreach ($orderItems->referencedEntities() as $delta => $orderItem) {
      $totalPrice += doubleval($orderItem->get('field_order_item_price')->getString());
    }

    if ($currentTotalPrice !== $totalPrice) {
      $node->set('field_order_shopping_total_cost', $totalPrice);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dinger_settings_node_update(NodeInterface $node): void
{
  switch ($node->bundle()) {
    case 'bid':
      /** @var BiddingService $biddingService */
      $biddingService = Drupal::service('hucha_settings.bidding_service');
      $biddingService->onBidUpdated($node);
      break;
    case 'order':
      /** @var OrdersService $ordersService **/
      $ordersService = Drupal::service('hucha_settings.orders_service');
      $ordersService->onOrderUpdated($node);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dinger_settings_user_update(UserInterface $userEntity): void {
  if ($userEntity->hasRole('customer')) {

    $originalUser = $userEntity->getOriginal();
    if ($originalUser) {
      $originalPhoto = $originalUser->get('user_picture')->target_id;
      $newPhoto = $userEntity->get('user_picture')->target_id;
      $profilePhotoUpdated = $originalPhoto !== $newPhoto;
      if ($profilePhotoUpdated) {
        /** @var CustomersService $customerService */
        $customerService = Drupal::service('dinger_settings.customers_service');
        /** @var Node $customer */
        $customer = $customerService->findCustomerByUserId($userEntity->id());
        if ($customer) {
          /** @var FireStorageCloudService $fireStorage */
          $fireStorage = Drupal::service('hucha_settings.fire_storage_cloud_service');
          if ($newPhoto !== null) {
            $fireStorage->uploadCustomerProfilePhoto($customer);
          } else {
            $fireStorage->deleteCustomerProfilePhoto($customer);
          }
        } else {
          Drupal::logger('dinger_settings')->error("User '{$userEntity->id()}' is not attached to customer.");
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dinger_settings_node_insert(NodeInterface $entity): void {
  if ($entity->bundle() === 'bid') {
    /** @var $biddingService BiddingService */
    $biddingService = Drupal::service('hucha_settings.bidding_service');
    $entity->enforceIsNew();
    $biddingService->onBidCreated($entity);
  }

  if ($entity->bundle() === 'call') {
    /** @var CallsService $callsService **/
    $callsService = Drupal::service('hucha_settings.calls_service');
    $callsService->onCallInserted($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dinger_settings_file_presave(FileInterface $file): void
{
  if ($file->isNew()) {
    /**
     * @var UtilsService $utilsService
     */
    $utilsService = \Drupal::service('hucha_settings.utils_service');
    $reference = $utilsService->generateRandomId();

    // Get the file extension
    $extension = pathinfo($file->getFilename(), PATHINFO_EXTENSION);

    // Set filename with extension
    $new_filename = 'file_' . $reference;
    if (!empty($extension)) {
      $new_filename .= '.' . $extension;
    }
    $file->setFilename($new_filename);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dinger_settings_user_presave(UserInterface $user): void
{
  if ($user->isNew()) {
    $rolesQueryValue = Drupal::request()->query->get('roles', false);
    if ($rolesQueryValue !== false) {
      Drupal::logger('dinger_settings')->info('User roles: ' . $rolesQueryValue);
      $rolesIds = explode('|', $rolesQueryValue);
      foreach ($rolesIds as $roleId) {
        $user->addRole(trim($roleId));
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dinger_settings_user_insert(UserInterface $user): void
{
  if ($user->hasRole('customer')) {
    $lastname = Drupal::request()->query->get('lastname', '');
    $phone = Drupal::request()->query->get('phone', '');
    $ageRange = Drupal::request()->query->get('ageRange', '');
    try {
      $newCustomerId = Node::create([
        'type' => 'customer',
        'title' => 'reference_nbr',
        'field_customer_lastname' => $lastname,
        'field_customer_phone' => $phone,
        'field_customer_age_range' => $ageRange,
        'field_customer_available_balance' => 0,
        'field_customer_pending_balance' => 0,
        'field_customer_user' => $user->id(),
        'uid' => $user->id(),
      ])->save();
      Drupal::logger('dinger_settings')->info('New customer created');

      /**
       * Upload user profile picture to Firebase Storage
       */
      /** @var FireStorageCloudService $fireStorage */
      $fireStorage = Drupal::service('hucha_settings.fire_storage_cloud_service');
      $fireStorage->uploadCustomerProfilePhoto(Node::load($newCustomerId));

    } catch (EntityStorageException $e) {
      Drupal::logger('dinger_settings')->error('Creating customer failed: ' . $e->getMessage());
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dinger_settings_preprocess_page(&$variables): void {
  if (Drupal::request()->query->has('target')) {
    $variables['target_device'] = Drupal::request()->query->get('target');
  }
}

/**
 * Implements hook_cron().
 */
function dinger_settings_cron(): void
{
  $logger = Drupal::logger('dinger_settings');

  /**
   * @var DataAccessor $dataAccessor
   * @var UtilsService $utils
   */
  $dataAccessor = Drupal::service('hucha_settings.data_accessor');
  $utils = Drupal::service('hucha_settings.utils_service');

  $active = false;
  if ($active) {
    /**
     * Cancel expired calls
     */
    $expiredCalls = $dataAccessor->getExpiredCalls();
    if (!empty($expiredCalls)) {
      foreach ($expiredCalls as $expiredCallId => $expiredCall) {
        if ($expiredCall instanceof NodeInterface) {
          try {
            $order = $expiredCall->get('field_call_order')->entity;
            if ($order == null) {
              $logger->error('No order attached to call ' . $expiredCallId . ' found');
            } else {
              if ($utils->isInThePast($order->get('field_order_delivery_time')->date)) {
                $order->set('field_order_status', 'cancelled');
              } else {
                $order->set('field_order_status', 'idle');
              }
              $expiredCall->set('field_call_status', 'expired');
              $order->save();
              $expiredCall->save();
            }
          } catch (EntityStorageException $e) {
            $options = ['@message' => $e->getMessage()];
            $logger->error(t('Updating expired order or call failed. Message: @message', $options));
          }
        }
      }
    }

    /**
     * Cancel expired orders
     */
    $expiredIdleOrders = $dataAccessor->getOrdersExpiringInHours(0, 'idle');
    if (!empty($expiredIdleOrders)) {
      foreach ($expiredIdleOrders as $idleOrderId => $expiredIdleOrder) {
        if ($expiredIdleOrder instanceof NodeInterface) {
          try {
            $expiredIdleOrder->set('field_order_status', 'cancelled');
            $expiredIdleOrder->save();
          } catch (EntityStorageException $e) {
            $options = ['@id' => $idleOrderId, '@message' => $e->getMessage()];
            $logger->error(t('Updating expired order @id failed. Message: @message', $options));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dinger_settings_node_access(EntityInterface $entity, $operation, AccountInterface $account): AccessResult
{
  if ($account instanceof UserInterface && $account->hasRole('administrator')) {
    return AccessResult::allowed();
  }

  if ($entity instanceof NodeInterface) {
    switch ($entity->bundle()) {
      case 'bid':
        if ($operation === 'update') {
          $bidCreator = $entity
            ->get('field_bid_customer')->entity
            ->get('field_customer_user')->entity;
          if ($bidCreator instanceof UserInterface and $bidCreator->id() === $account->id()) {
            return AccessResult::allowed();
          }

          $relatedCallCreator = $entity
            ->get('field_bid_call')->entity
            ->get('field_call_order')->entity
            ->get('field_order_creator')->entity
            ->get('field_customer_user')->entity;
          if ($relatedCallCreator instanceof UserInterface and $relatedCallCreator->id() === $account->id()) {
            return AccessResult::allowed();
          }
        }
        break;
      case 'call':
        if ($operation === 'update') {
          $callCreator = $entity
            ->get('field_call_order')->entity
            ->get('field_order_creator')->entity
            ->get('field_customer_user')->entity;
          if ($callCreator instanceof UserInterface and $callCreator->id() === $account->id()) {
            return AccessResult::allowed();
          }

          /**
           * Allow order executor to update (complete) call attributed to him
           */
          if ($entity->get('field_call_status')->getString() == 'attributed') {
            $executor = $entity
              ->get('field_call_order')->entity
              ->get('field_order_executor')->entity
              ->get('field_customer_user')->entity;
            if ($executor instanceof UserInterface and $executor->id() === $account->id()) {
              return AccessResult::allowed();
            }
          }
        }
        break;
    }
  }
  return AccessResult::neutral();
}

